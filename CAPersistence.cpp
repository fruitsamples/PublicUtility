/*	Copyright: 	© Copyright 2003 Apple Computer, Inc. All rights reserved.

	Disclaimer:	IMPORTANT:  This Apple software is supplied to you by Apple Computer, Inc.
			("Apple") in consideration of your agreement to the following terms, and your
			use, installation, modification or redistribution of this Apple software
			constitutes acceptance of these terms.  If you do not agree with these terms,
			please do not use, install, modify or redistribute this Apple software.

			In consideration of your agreement to abide by the following terms, and subject
			to these terms, Apple grants you a personal, non-exclusive license, under Apple’s
			copyrights in this original Apple software (the "Apple Software"), to use,
			reproduce, modify and redistribute the Apple Software, with or without
			modifications, in source and/or binary forms; provided that if you redistribute
			the Apple Software in its entirety and without modifications, you must retain
			this notice and the following text and disclaimers in all such redistributions of
			the Apple Software.  Neither the name, trademarks, service marks or logos of
			Apple Computer, Inc. may be used to endorse or promote products derived from the
			Apple Software without specific prior written permission from Apple.  Except as
			expressly stated in this notice, no other rights or licenses, express or implied,
			are granted by Apple herein, including but not limited to any patent rights that
			may be infringed by your derivative works or by other works in which the Apple
			Software may be incorporated.

			The Apple Software is provided by Apple on an "AS IS" basis.  APPLE MAKES NO
			WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED
			WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
			PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE OR IN
			COMBINATION WITH YOUR PRODUCTS.

			IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL OR
			CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
			GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
			ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION AND/OR DISTRIBUTION
			OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT
			(INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN
			ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/*=============================================================================
	CAPersistence.cpp
	CAAudioEngine

=============================================================================*/

#include "CACFDictionary.h"
#include "CAAudioUnit.h"
#include "CACFString.h"
#include "CAAudioChannelLayout.h"

#pragma mark __CAStreamBasicDescription

// CAStreamBasicDescription
static const CFStringRef kSampleRate = CFSTR("sample rate");
static const CFStringRef kFormat = CFSTR("format");
static const CFStringRef kFormatFlags = CFSTR("format flags");
static const CFStringRef kPacketBytes = CFSTR("packet bytes");
static const CFStringRef kFramePackets = CFSTR("frame packets");
static const CFStringRef kFrameBytes = CFSTR("frame bytes");
static const CFStringRef kFrameChannels = CFSTR("frame channels");
static const CFStringRef kChannelBits = CFSTR("channel bits");

// CAComponentDescription
static const CFStringRef kType = CFSTR("type");
static const CFStringRef kSubType = CFSTR("subtype");
static const CFStringRef kManu = CFSTR("manufacturer");

// CAAudioUnit
static const CFStringRef kCompDescKey = CFSTR("desc");
static const CFStringRef kScopeKey = CFSTR("scope");
static const CFStringRef kElementKey = CFSTR("el");
#define kConnectionKey 	"conn"
static const CFStringRef kFormatKey = CFSTR("format");
static const CFStringRef kNumBussesKey = CFSTR("num busses");
static const CFStringRef kChannelLayoutKey = CFSTR("channel layout");

// CAAudioChannelLayout

		// This will return a value that should be used as the key for this struct
		// and a CFData object that contains the current state of this object
OSStatus	CAStreamBasicDescription::Save (CFPropertyListRef *outData) const
{
	CACFDictionary dict(false);

	if (!dict.AddFloat64 (kSampleRate, mSampleRate)) goto error;
	if (!dict.AddUInt32 (kFormat, mFormatID)) goto error;
	if (!dict.AddUInt32 (kFormatFlags, mFormatFlags)) goto error;
	if (!dict.AddUInt32 (kPacketBytes, mBytesPerPacket)) goto error;
	if (!dict.AddUInt32 (kFramePackets, mFramesPerPacket)) goto error;
	if (!dict.AddUInt32 (kFrameBytes, mBytesPerFrame)) goto error;
	if (!dict.AddUInt32 (kFrameChannels, mChannelsPerFrame)) goto error;
	if (!dict.AddUInt32 (kChannelBits, mBitsPerChannel)) goto error;
	
	*outData = dict.GetDict();

	return noErr;

error:
	dict.ShouldRelease (true);
	return -1;
}

	
		// Given a CFData object generated by the save command, this will re-establish
		// the CAStreamBasicDescription
OSStatus	CAStreamBasicDescription::Restore (CFPropertyListRef& inData)
{
	if (CFGetTypeID (inData) != CFDictionaryGetTypeID()) return -1;
	CACFDictionary dict(static_cast<CFDictionaryRef>(inData), false);
	
	if (!dict.GetFloat64 (kSampleRate, mSampleRate)) return -1;
	if (!dict.GetUInt32 (kFormat, mFormatID)) return -1;
	if (!dict.GetUInt32 (kFormatFlags, mFormatFlags)) return -1;
	if (!dict.GetUInt32 (kPacketBytes, mBytesPerPacket)) return -1;
	if (!dict.GetUInt32 (kFramePackets, mFramesPerPacket)) return -1;
	if (!dict.GetUInt32 (kFrameBytes, mBytesPerFrame)) return -1;
	if (!dict.GetUInt32 (kFrameChannels, mChannelsPerFrame)) return -1;
	if (!dict.GetUInt32 (kChannelBits, mBitsPerChannel)) return -1;

	return noErr;
}

#pragma mark __CAComponentDescription
void 	CFStrToNum (CFStringRef inStr, UInt32 &outNum)
{
	char str[5];
	CFStringGetCString (inStr, str, 5, kCFStringEncodingASCII);
	outNum = str[0] << 24 | str[1] << 16 | str[2] << 8 | str[3];
	outNum = CFSwapInt32BigToHost (outNum);
}

void	NumToStr (char* outStr, UInt32 inNum)
{
	int num = CFSwapInt32HostToBig (inNum);
	sprintf (outStr, "%4.4s", (char*)&(num));
}

OSStatus		CAComponentDescription::Save (CFPropertyListRef *outData) const
{
	CACFDictionary dict(false);

	char str[5];
	NumToStr (str, componentType);
	if (!dict.AddString (kType, CACFString(str).GetCFString())) goto error;

	NumToStr (str, componentSubType);
	if (!dict.AddString (kSubType, CACFString(str).GetCFString())) goto error;

	NumToStr (str, componentManufacturer);
	if (!dict.AddString (kManu, CACFString(str).GetCFString())) goto error;
	
	*outData = dict.GetDict();
	
	return 0;
error:
	dict.ShouldRelease (true);
	return -1;
}

OSStatus		CAComponentDescription::Restore (CFPropertyListRef &inData)
{
	if (CFGetTypeID (inData) != CFDictionaryGetTypeID()) return -1;
	CACFDictionary dict(static_cast<CFDictionaryRef>(inData), false);
	
	CFStringRef value;
	
	if (!dict.GetString (kType, value)) return -1;
	CFStrToNum (value, componentType);

	if (!dict.GetString (kSubType, value)) return -1;
	CFStrToNum (value, componentSubType);

	if (!dict.GetString (kManu, value)) return -1;
	CFStrToNum (value, componentManufacturer);

	componentFlags = 0;
	componentFlagsMask = 0;
	
	return 0;
}

#pragma mark __CAComponent

OSStatus		CAComponent::Save (CFPropertyListRef *outData) const
{
	return mDesc.Save (outData);
}

OSStatus		CAComponent::Restore (CFPropertyListRef &inData)
{
	if (mDesc.Restore (inData)) return -1;

	Clear();

	mComp = FindNextComponent (NULL, &mDesc);
		// this will restore the current flags...
	if (mComp)
		GetComponentInfo (Comp(), &mDesc, NULL, NULL, NULL);

	return noErr;
}


#pragma mark __CAAudioChannelLayout

static const CFStringRef kACLTagKey = CFSTR("acl tag");
static const CFStringRef kACLBitmapKey = CFSTR("chan bitmap");
static const CFStringRef kACLDescKey = CFSTR("num descs");
static const CFStringRef kACLLabelKey = CFSTR("label");
static const CFStringRef kACLFlagsKey = CFSTR("flags");
static const CFStringRef kACLCoords0Key = CFSTR("coords 0");
static const CFStringRef kACLCoords1Key = CFSTR("coords 1");
static const CFStringRef kACLCoords2Key = CFSTR("coords 2");


OSStatus	CAAudioChannelLayout::Save (CFPropertyListRef *outData) const 
{
	const AudioChannelLayout& layout = Layout();

	CACFDictionary dict (false);
	if (!dict.AddUInt32 (kACLTagKey, layout.mChannelLayoutTag))
		goto badadd;
	if (!dict.AddUInt32 (kACLBitmapKey, layout.mChannelBitmap))
		goto badadd;
	if (!dict.AddUInt32 (kACLDescKey, layout.mNumberChannelDescriptions))
		goto badadd;
	
	if (layout.mNumberChannelDescriptions)
	{	
		static char string[32];
		
		const AudioChannelDescription *desc = layout.mChannelDescriptions;
		for (unsigned int i = 0; i < layout.mNumberChannelDescriptions; ++i, ++desc) 
		{
			CACFDictionary descDict (true);
			sprintf (string, "%d", i);
			if (!descDict.AddUInt32 (kACLLabelKey, desc->mChannelLabel))
				goto badadd;
			if (!descDict.AddUInt32 (kACLFlagsKey, desc->mChannelFlags))
				goto badadd;
			if (!descDict.AddFloat32 (kACLCoords0Key, desc->mCoordinates[0]))
				goto badadd;
			if (!descDict.AddFloat32 (kACLCoords1Key, desc->mCoordinates[1]))
				goto badadd;
			if (!descDict.AddFloat32 (kACLCoords2Key, desc->mCoordinates[2]))
				goto badadd;
			if (!dict.AddCFTypeWithCStringKey (string, descDict.GetDict()))
				goto badadd;
		}
	}
	
	*outData = dict.GetDict();	
	
	return noErr;
	
badadd:
	dict.ShouldRelease(true);
	return -1;
}

OSStatus	CAAudioChannelLayout::Restore (CFPropertyListRef &inData) 
{
	if (CFGetTypeID (inData) != CFDictionaryGetTypeID()) return -1;
	CACFDictionary dict(static_cast<CFDictionaryRef>(inData), false);

	ACLRefCounter *temp = NULL;
	UInt32 size = 0;
	AudioChannelLayout* layout;
	
	UInt32 numDescs;
	if (!dict.GetUInt32 (kACLDescKey, numDescs))
		goto badget;
	
	size = numDescs * sizeof (AudioChannelDescription) + offsetof(AudioChannelLayout, mChannelDescriptions[0]);
	temp = new ACLRefCounter (size);
	layout = temp->GetLayout();
		
	if (!dict.GetUInt32 (kACLTagKey, layout->mChannelLayoutTag))
		goto badget;
	if (!dict.GetUInt32 (kACLBitmapKey, layout->mChannelBitmap))
		goto badget;
	layout->mNumberChannelDescriptions = numDescs;
	
	if (numDescs)
	{
		static char string[32];
		AudioChannelDescription *desc = layout->mChannelDescriptions;
		for (unsigned int i = 0; i < numDescs; ++i, ++desc)
		{
			sprintf (string, "%d", i);
			CFDictionaryRef descDict;
			if (!dict.GetCFTypeWithCStringKey (string, static_cast<const void*>(descDict)))
				goto badget;
			CACFDictionary theDesc (descDict, false);
			
			if (!theDesc.GetUInt32 (kACLLabelKey, desc->mChannelLabel))
				goto badget;
			if (!theDesc.GetUInt32 (kACLFlagsKey, desc->mChannelFlags))
				goto badget;
			if (!theDesc.GetFloat32 (kACLCoords0Key, desc->mCoordinates[0]))
				goto badget;
			if (!theDesc.GetFloat32 (kACLCoords1Key, desc->mCoordinates[1]))
				goto badget;
			if (!theDesc.GetFloat32 (kACLCoords2Key, desc->mCoordinates[2]))
				goto badget;
		}
	}
	if (mLayoutHolder)
		mLayoutHolder->release();

	mLayoutHolder = temp;
	
	return noErr;

badget:
	delete temp;
	return -1;
}
